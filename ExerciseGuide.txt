
Array
1Merge 2 sorted array into 1 array.(Merge2SortArrayinto1.java)
First array is bigger and has sufficient space to accomode first.
Swap method --
	public static void swap(int a[], int index, int no) {
		int temp;
		for (int k = index; k <= a.length - 1; k++) {
			temp = a[k];
			a[k] = no;
			no = temp;
		}
	}
-------------------------------------------------------
Linked List--
1)Reverse linked list (with 3 pointers)
2)Reverse last K nodes (using 4 pointers)
3)Merge 2 Linked list into 1 Linked list.
answer - with recursion.
	public static Node SortedMerge(Node A, Node B) {

		if (A == null)
			return B;
		if (B == null)
			return A;

		if (A.data < B.data) {
			A.next = SortedMerge(A.next, B);
			return A;
		} else {
			B.next = SortedMerge(A, B.next);
			return B;
		}

	}
