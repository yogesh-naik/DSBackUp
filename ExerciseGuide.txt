
#LinkedHashSet and LinkedHashMap for keeping order(Normal Hashmap , HashTable and HashSet does not keep the order)
----------------------------------------------------------------
Array
1Merge 2 sorted array into 1 array.(Merge2SortArrayinto1.java)
First array is bigger and has sufficient space to accomode first.
Swap method --
	public static void swap(int a[], int index, int no) {
		int temp;
		for (int k = index; k <= a.length - 1; k++) {
			temp = a[k];
			a[k] = no;
			no = temp;
		}
	}
	
Rotate array element by 1 clockwise
int arr[] = { 1, 2, 3, 4, 5};
output = {5, 1, 2, 3, 4}
//Rotate by one
	static void ClockRotate(int a[]) {
		int temp = a[a.length-1];
		for (int i = a.length - 2; i >= 0; i--) {
			a[i + 1] = a[i];
		}
		a[0] = temp;
	}
-------------------------
Rotate array element by 1 Anti clockwise
int arr1[] = { 1,2,3,4,5 };
o/p =>  	2 3 4 5 1
	int temp = arr1[0];
        	for (int i = 1; i <= arr1.length - 1; i++) {
			arr1[i-1] = arr1[i];
		}
		arr1[arr1.length-1] = temp;



--------------------------------
Reverse the partial array -
int a[] = {1,2,3,4,5};
o/pt = 1 2 5 4 3

for(i=0;i<a.length/2-1;i++){  // Key element  i<a.length/2-1
	int temp = a[i+2];
	a[i+2] = a[a.length-1-i];
	a[a.length-1-i] = temp;
}
		

-------------------------------------------------------
Linked List--
1)Reverse linked list (with 3 pointers)
2)Reverse last K nodes (using 4 pointers)
3)Merge 2 Linked list into 1 Linked list.
answer - with recursion.
	public static Node SortedMerge(Node A, Node B) {

		if (A == null)
			return B;
		if (B == null)
			return A;

		if (A.data < B.data) {
			A.next = SortedMerge(A.next, B);
			return A;
		} else {
			B.next = SortedMerge(A, B.next);
			return B;
		}

	}
	
--------------------------------------------------
//Objective- Print the hashtable after sorting the Values(not sorted Keys)
Hashtable<String, Integer> people = new Hashtable<String, Integer>();
people.put("John", 0);
people.put("Angie", 31);
people.put("Steve", 5);

//Sort the values in ascending order
List<Integer> al = new ArrayList<Integer>(people.values());
Collections.sort(al);
System.out.println(al);

System.out.println("-------------");

//Get all Entries from Ha
Set Entry = people.entrySet();

//Print the Hashtable based on sorted Values.
int i = 0;
for (Integer a : al)
for (Map.Entry entry : people.entrySet()) {
	if (a.equals(entry.getValue())) {
		String strKey = (String) entry.getKey();
		System.out.println(a + "--" + strKey);
	}
}
--------------------------------------
